@model CustomAuthentication2.Models.Post
@using CustomAuthentication2.Security
@{
    ViewBag.Title = "Create";
}
<script src="http://parsleyjs.org/dist/parsley.min.js"></script>

<link rel="stylesheet" href="http://parsleyjs.org/src/parsley.css">

<h2>Create a new Post</h2>
<span class="text-danger">@ViewBag.Error</span>

@using (Html.BeginForm("Create", "Posts", FormMethod.Post, new { enctype = "multipart/form-data" ,id="postCreateForm" }))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">

        <hr />
        
        <div class="form-group">
            @Html.LabelFor(model => model.Title, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">

                @Html.EditorFor(model => model.Title, new { htmlAttributes = new { @class = "form-control", required = "" } })
                
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.Category, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model=>model.Category, new List<SelectListItem>
            {
                
                              new SelectListItem() {Text = "Choose a Category", Value=""},
                                new SelectListItem() {Text = "Android", Value="android"},
                                new SelectListItem() {Text = "Windows", Value="windows"},
                                new SelectListItem() {Text = "Apple", Value="apple"},
                                new SelectListItem() {Text = "Linux", Value="linux"}
            }, htmlAttributes: new { @class = "form-control", required = "" })
            </div>
        </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.TextAreaFor(model => model.Description, htmlAttributes: new { @class = "form-control", rows = "10", required = "" })
                    
                </div>
            </div>
            
            <img id="preview" src="placeholder.png" style="display:none" height="200px" width="200px" />
            
        
        <input type="file" class="form-control" style="max-width:220px" name="file" onchange="previewImage(this)" accept="image/*" required="" data-parsley-max-file-size="400" />
     


            @Html.HiddenFor(model => model.PostingDate,
                  new { id = "hiddenRole", Value = DateTime.Now })


            @Html.HiddenFor(model => model.Username,
                 new { id = "hiddenRole", Value = SessionPersister.Username })

            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    <input type="submit" value="Submit" class="btn btn-default" />
                </div>
            </div>
        </div>
}

<div>
    @Html.ActionLink("Back to List", "Index", routeValues: new { id = SessionPersister.Username })
</div>
<script type="text/javascript">

    function previewImage(input) {
        var preview = document.getElementById('preview');

        if (input.files && input.files[0]) {
            var reader = new FileReader();
            reader.onload = function (e) {
                preview.style.display = "block";
                preview.setAttribute('src', e.target.result);

            }
            reader.readAsDataURL(input.files[0]);


        } else {
            preview.style.display = "none";
            preview.setAttribute('src', 'placeholder.png');


        }
    }
</script>
<script type="text/javascript">
    $(function () {
        $('#postCreateForm').parsley().on('field:validated', function () {
            var ok = $('.parsley-error').length === 0;
            $('.bs-callout-info').toggleClass('hidden', !ok);
            $('.bs-callout-warning').toggleClass('hidden', ok);
        });
        
    });
    window.Parsley.addValidator('maxFileSize', {
        validateString: function (_value, maxSize, parsleyInstance) {
            if (!window.FormData) {
                alert('You are making all developpers in the world cringe. Upgrade your browser!');
                return true;
            }
            var files = parsleyInstance.$element[0].files;
            return files.length != 1 || files[0].size <= maxSize * 1024;
        },
        requirementType: 'integer',
        messages: {
            en: 'This file should not be larger than %s Kb',
            fr: "Ce fichier est plus grand que %s Kb."
        }
    });
</script>